# -*- coding: utf-8 -*-
"""Credit Card Fraud Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l4fbMFHLfR67a1ixyPMXt5aSkVVC1b9d
"""

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d mlg-ulb/creditcardfraud

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.utils import resample

data = pd.read_csv('/content/creditcard.csv')

print(data.head())
print(data.info())
print(data.describe())

print(data.isnull().sum())

scaler = StandardScaler()
data[['Amount']] = scaler.fit_transform(data[['Amount']])

X = data.drop('Class', axis=1)
y = data['Class']

pd.value_counts(data['Class'])

import seaborn as sns
sns.countplot(data['Class'])

import matplotlib.pyplot as plt
corrmat = data.corr()
plt.figure(figsize=(10,10))
sns.heatmap(corrmat , vmax=0.8 , square=True)
plt.show()

X = pd.concat([X, y], axis=1)

not_fraud = X[X.Class == 0]
fraud = X[X.Class == 1]
fraud_upsampled = resample(fraud,
                          replace=True, # sample with replacement
                          n_samples=len(not_fraud), # match number in majority class
                          random_state=27) # reproducible results

upsampled = pd.concat([not_fraud, fraud_upsampled])

print(upsampled.Class.value_counts())

# Separate features and target
X = upsampled.drop('Class', axis=1)
y = upsampled['Class']

from imblearn.over_sampling import SMOTE

sm = SMOTE(random_state=42)
X_res, y_res = sm.fit_resample(X, y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

X_train.to_csv('X_train.csv', index=False)
X_test.to_csv('X_test.csv', index=False)
y_train.to_csv('y_train.csv', index=False)
y_test.to_csv('y_test.csv', index=False)

X_train

X_train.isnull().sum()

X_train.shape

y_train

y_train.isnull().sum()

y_train.shape

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 641 , random_state=0)
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)

n_errors = (y_pred != y_test).sum()

n_errors

import seaborn as sns
from sklearn.metrics import confusion_matrix , accuracy_score
cm = confusion_matrix(y_test , y_pred)
sns.heatmap(cm , annot=True)
print(accuracy_score(y_test , y_pred))

from sklearn.metrics import precision_score
precision_score(y_test , y_pred)

from sklearn.metrics import recall_score
recall_score(y_test , y_pred)

from sklearn.metrics import classification_report
print(classification_report(y_test , y_pred))